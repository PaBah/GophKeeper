// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/paulbahush/projects/yp/GophKeeper/internal/client/client.go

// Package mock_client is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/PaBah/GophKeeper/internal/gen/proto/gophkeeper/v1"
	models "github.com/PaBah/GophKeeper/internal/models"
	"go.uber.org/mock/gomock"
	"google.golang.org/grpc"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockClient) SignIn(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockClientMockRecorder) SignIn(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockClient)(nil).SignIn), email, password)
}

// SignUp mocks base method.
func (m *MockClient) SignUp(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockClientMockRecorder) SignUp(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockClient)(nil).SignUp), email, password)
}

// MockGRPCClientProvider is a mock of GRPCClientProvider interface.
type MockGRPCClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCClientProviderMockRecorder
}

// MockGRPCClientProviderMockRecorder is the mock recorder for MockGRPCClientProvider.
type MockGRPCClientProviderMockRecorder struct {
	mock *MockGRPCClientProvider
}

// NewMockGRPCClientProvider creates a new mock instance.
func NewMockGRPCClientProvider(ctrl *gomock.Controller) *MockGRPCClientProvider {
	mock := &MockGRPCClientProvider{ctrl: ctrl}
	mock.recorder = &MockGRPCClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCClientProvider) EXPECT() *MockGRPCClientProviderMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockGRPCClientProvider) CreateCard(ctx context.Context, number, expirationDate, holderName, cvv string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", ctx, number, expirationDate, holderName, cvv)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockGRPCClientProviderMockRecorder) CreateCard(ctx, number, expirationDate, holderName, cvv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockGRPCClientProvider)(nil).CreateCard), ctx, number, expirationDate, holderName, cvv)
}

// CreateCredentials mocks base method.
func (m *MockGRPCClientProvider) CreateCredentials(ctx context.Context, serviceName, identity, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentials", ctx, serviceName, identity, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCredentials indicates an expected call of CreateCredentials.
func (mr *MockGRPCClientProviderMockRecorder) CreateCredentials(ctx, serviceName, identity, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentials", reflect.TypeOf((*MockGRPCClientProvider)(nil).CreateCredentials), ctx, serviceName, identity, password)
}

// DeleteCard mocks base method.
func (m *MockGRPCClientProvider) DeleteCard(ctx context.Context, cardID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, cardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockGRPCClientProviderMockRecorder) DeleteCard(ctx, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockGRPCClientProvider)(nil).DeleteCard), ctx, cardID)
}

// DeleteCredentials mocks base method.
func (m *MockGRPCClientProvider) DeleteCredentials(ctx context.Context, credentialsID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", ctx, credentialsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredentials indicates an expected call of DeleteCredentials.
func (mr *MockGRPCClientProviderMockRecorder) DeleteCredentials(ctx, credentialsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockGRPCClientProvider)(nil).DeleteCredentials), ctx, credentialsID)
}

// DeleteFile mocks base method.
func (m *MockGRPCClientProvider) DeleteFile(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockGRPCClientProviderMockRecorder) DeleteFile(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockGRPCClientProvider)(nil).DeleteFile), ctx, name)
}

// DownloadsFile mocks base method.
func (m *MockGRPCClientProvider) DownloadsFile(ctx context.Context, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DownloadsFile", ctx, name)
}

// DownloadsFile indicates an expected call of DownloadsFile.
func (mr *MockGRPCClientProviderMockRecorder) DownloadsFile(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadsFile", reflect.TypeOf((*MockGRPCClientProvider)(nil).DownloadsFile), ctx, name)
}

// GetCards mocks base method.
func (m *MockGRPCClientProvider) GetCards(ctx context.Context) ([]models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards", ctx)
	ret0, _ := ret[0].([]models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCards indicates an expected call of GetCards.
func (mr *MockGRPCClientProviderMockRecorder) GetCards(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockGRPCClientProvider)(nil).GetCards), ctx)
}

// GetCredentials mocks base method.
func (m *MockGRPCClientProvider) GetCredentials(ctx context.Context) ([]models.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", ctx)
	ret0, _ := ret[0].([]models.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockGRPCClientProviderMockRecorder) GetCredentials(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockGRPCClientProvider)(nil).GetCredentials), ctx)
}

// GetFiles mocks base method.
func (m *MockGRPCClientProvider) GetFiles(ctx context.Context) ([]models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", ctx)
	ret0, _ := ret[0].([]models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockGRPCClientProviderMockRecorder) GetFiles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockGRPCClientProvider)(nil).GetFiles), ctx)
}

// SetSessionID mocks base method.
func (m *MockGRPCClientProvider) SetSessionID(sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSessionID", sessionID)
}

// SetSessionID indicates an expected call of SetSessionID.
func (mr *MockGRPCClientProviderMockRecorder) SetSessionID(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionID", reflect.TypeOf((*MockGRPCClientProvider)(nil).SetSessionID), sessionID)
}

// SignIn mocks base method.
func (m *MockGRPCClientProvider) SignIn(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockGRPCClientProviderMockRecorder) SignIn(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockGRPCClientProvider)(nil).SignIn), email, password)
}

// SignUp mocks base method.
func (m *MockGRPCClientProvider) SignUp(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockGRPCClientProviderMockRecorder) SignUp(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockGRPCClientProvider)(nil).SignUp), email, password)
}

// TryToConnect mocks base method.
func (m *MockGRPCClientProvider) TryToConnect() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToConnect")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryToConnect indicates an expected call of TryToConnect.
func (mr *MockGRPCClientProviderMockRecorder) TryToConnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToConnect", reflect.TypeOf((*MockGRPCClientProvider)(nil).TryToConnect))
}

// UpdateCards mocks base method.
func (m *MockGRPCClientProvider) UpdateCards(ctx context.Context, card models.Card) (models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCards", ctx, card)
	ret0, _ := ret[0].(models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCards indicates an expected call of UpdateCards.
func (mr *MockGRPCClientProviderMockRecorder) UpdateCards(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCards", reflect.TypeOf((*MockGRPCClientProvider)(nil).UpdateCards), ctx, card)
}

// UpdateCredentials mocks base method.
func (m *MockGRPCClientProvider) UpdateCredentials(ctx context.Context, credentials models.Credentials) (models.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentials", ctx, credentials)
	ret0, _ := ret[0].(models.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredentials indicates an expected call of UpdateCredentials.
func (mr *MockGRPCClientProviderMockRecorder) UpdateCredentials(ctx, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentials", reflect.TypeOf((*MockGRPCClientProvider)(nil).UpdateCredentials), ctx, credentials)
}


// UploadFile mocks base method.
func (m *MockGRPCClientProvider) UploadFile(ctx context.Context, filePath string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UploadFile", ctx, filePath)
}


// UploadFile indicates an expected call of UploadFile.
func (mr *MockGRPCClientProviderMockRecorder) UploadFile(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockGRPCClientProvider)(nil).UploadFile), ctx, filePath)
}

// SubscribeToChanges mocks base method.
func (m *MockGRPCClientProvider) SubscribeToChanges(ctx context.Context)  (grpc.ServerStreamingClient[pb.SubscribeToChangesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToChanges", ctx)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[pb.SubscribeToChangesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockGRPCClientProviderMockRecorder) SubscribeToChanges(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToChanges", reflect.TypeOf((*MockGRPCClientProvider)(nil).SubscribeToChanges), ctx)
}